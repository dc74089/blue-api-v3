/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ZebraTeam
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-02-26T16:01:43.676Z[GMT]")
public class ZebraTeam {
  @SerializedName("team_key")
  private String teamKey = null;

  @SerializedName("xs")
  private List<Double> xs = new ArrayList<Double>();

  @SerializedName("ys")
  private List<Double> ys = new ArrayList<Double>();

  public ZebraTeam teamKey(String teamKey) {
    this.teamKey = teamKey;
    return this;
  }

   /**
   * The TBA team key for the Zebra MotionWorks data.
   * @return teamKey
  **/
  @Schema(example = "frc7332", required = true, description = "The TBA team key for the Zebra MotionWorks data.")
  public String getTeamKey() {
    return teamKey;
  }

  public void setTeamKey(String teamKey) {
    this.teamKey = teamKey;
  }

  public ZebraTeam xs(List<Double> xs) {
    this.xs = xs;
    return this;
  }

  public ZebraTeam addXsItem(Double xsItem) {
    this.xs.add(xsItem);
    return this;
  }

   /**
   * A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
   * @return xs
  **/
  @Schema(required = true, description = "A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.")
  public List<Double> getXs() {
    return xs;
  }

  public void setXs(List<Double> xs) {
    this.xs = xs;
  }

  public ZebraTeam ys(List<Double> ys) {
    this.ys = ys;
    return this;
  }

  public ZebraTeam addYsItem(Double ysItem) {
    this.ys.add(ysItem);
    return this;
  }

   /**
   * A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.
   * @return ys
  **/
  @Schema(required = true, description = "A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp.")
  public List<Double> getYs() {
    return ys;
  }

  public void setYs(List<Double> ys) {
    this.ys = ys;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZebraTeam zebraTeam = (ZebraTeam) o;
    return Objects.equals(this.teamKey, zebraTeam.teamKey) &&
        Objects.equals(this.xs, zebraTeam.xs) &&
        Objects.equals(this.ys, zebraTeam.ys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamKey, xs, ys);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZebraTeam {\n");
    
    sb.append("    teamKey: ").append(toIndentedString(teamKey)).append("\n");
    sb.append("    xs: ").append(toIndentedString(xs)).append("\n");
    sb.append("    ys: ").append(toIndentedString(ys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
