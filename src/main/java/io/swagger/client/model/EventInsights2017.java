/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.8.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Insights for FIRST STEAMWORKS qualification and elimination matches.
 */
@Schema(description = "Insights for FIRST STEAMWORKS qualification and elimination matches.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-01T17:18:29.994708-05:00[US/Eastern]")
public class EventInsights2017 {
  @SerializedName("average_foul_score")
  private Float averageFoulScore = null;

  @SerializedName("average_fuel_points")
  private Float averageFuelPoints = null;

  @SerializedName("average_fuel_points_auto")
  private Float averageFuelPointsAuto = null;

  @SerializedName("average_fuel_points_teleop")
  private Float averageFuelPointsTeleop = null;

  @SerializedName("average_high_goals")
  private Float averageHighGoals = null;

  @SerializedName("average_high_goals_auto")
  private Float averageHighGoalsAuto = null;

  @SerializedName("average_high_goals_teleop")
  private Float averageHighGoalsTeleop = null;

  @SerializedName("average_low_goals")
  private Float averageLowGoals = null;

  @SerializedName("average_low_goals_auto")
  private Float averageLowGoalsAuto = null;

  @SerializedName("average_low_goals_teleop")
  private Float averageLowGoalsTeleop = null;

  @SerializedName("average_mobility_points_auto")
  private Float averageMobilityPointsAuto = null;

  @SerializedName("average_points_auto")
  private Float averagePointsAuto = null;

  @SerializedName("average_points_teleop")
  private Float averagePointsTeleop = null;

  @SerializedName("average_rotor_points")
  private Float averageRotorPoints = null;

  @SerializedName("average_rotor_points_auto")
  private Float averageRotorPointsAuto = null;

  @SerializedName("average_rotor_points_teleop")
  private Float averageRotorPointsTeleop = null;

  @SerializedName("average_score")
  private Float averageScore = null;

  @SerializedName("average_takeoff_points_teleop")
  private Float averageTakeoffPointsTeleop = null;

  @SerializedName("average_win_margin")
  private Float averageWinMargin = null;

  @SerializedName("average_win_score")
  private Float averageWinScore = null;

  @SerializedName("high_kpa")
  private List<String> highKpa = new ArrayList<String>();

  @SerializedName("high_score")
  private List<String> highScore = new ArrayList<String>();

  @SerializedName("kpa_achieved")
  private List<Float> kpaAchieved = new ArrayList<Float>();

  @SerializedName("mobility_counts")
  private List<Float> mobilityCounts = new ArrayList<Float>();

  @SerializedName("rotor_1_engaged")
  private List<Float> rotor1Engaged = new ArrayList<Float>();

  @SerializedName("rotor_1_engaged_auto")
  private List<Float> rotor1EngagedAuto = new ArrayList<Float>();

  @SerializedName("rotor_2_engaged")
  private List<Float> rotor2Engaged = new ArrayList<Float>();

  @SerializedName("rotor_2_engaged_auto")
  private List<Float> rotor2EngagedAuto = new ArrayList<Float>();

  @SerializedName("rotor_3_engaged")
  private List<Float> rotor3Engaged = new ArrayList<Float>();

  @SerializedName("rotor_4_engaged")
  private List<Float> rotor4Engaged = new ArrayList<Float>();

  @SerializedName("takeoff_counts")
  private List<Float> takeoffCounts = new ArrayList<Float>();

  @SerializedName("unicorn_matches")
  private List<Float> unicornMatches = new ArrayList<Float>();

  public EventInsights2017 averageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
    return this;
  }

   /**
   * Average foul score.
   * @return averageFoulScore
  **/
  @Schema(required = true, description = "Average foul score.")
  public Float getAverageFoulScore() {
    return averageFoulScore;
  }

  public void setAverageFoulScore(Float averageFoulScore) {
    this.averageFoulScore = averageFoulScore;
  }

  public EventInsights2017 averageFuelPoints(Float averageFuelPoints) {
    this.averageFuelPoints = averageFuelPoints;
    return this;
  }

   /**
   * Average fuel points scored.
   * @return averageFuelPoints
  **/
  @Schema(required = true, description = "Average fuel points scored.")
  public Float getAverageFuelPoints() {
    return averageFuelPoints;
  }

  public void setAverageFuelPoints(Float averageFuelPoints) {
    this.averageFuelPoints = averageFuelPoints;
  }

  public EventInsights2017 averageFuelPointsAuto(Float averageFuelPointsAuto) {
    this.averageFuelPointsAuto = averageFuelPointsAuto;
    return this;
  }

   /**
   * Average fuel points scored during auto.
   * @return averageFuelPointsAuto
  **/
  @Schema(required = true, description = "Average fuel points scored during auto.")
  public Float getAverageFuelPointsAuto() {
    return averageFuelPointsAuto;
  }

  public void setAverageFuelPointsAuto(Float averageFuelPointsAuto) {
    this.averageFuelPointsAuto = averageFuelPointsAuto;
  }

  public EventInsights2017 averageFuelPointsTeleop(Float averageFuelPointsTeleop) {
    this.averageFuelPointsTeleop = averageFuelPointsTeleop;
    return this;
  }

   /**
   * Average fuel points scored during teleop.
   * @return averageFuelPointsTeleop
  **/
  @Schema(required = true, description = "Average fuel points scored during teleop.")
  public Float getAverageFuelPointsTeleop() {
    return averageFuelPointsTeleop;
  }

  public void setAverageFuelPointsTeleop(Float averageFuelPointsTeleop) {
    this.averageFuelPointsTeleop = averageFuelPointsTeleop;
  }

  public EventInsights2017 averageHighGoals(Float averageHighGoals) {
    this.averageHighGoals = averageHighGoals;
    return this;
  }

   /**
   * Average points scored in the high goal.
   * @return averageHighGoals
  **/
  @Schema(required = true, description = "Average points scored in the high goal.")
  public Float getAverageHighGoals() {
    return averageHighGoals;
  }

  public void setAverageHighGoals(Float averageHighGoals) {
    this.averageHighGoals = averageHighGoals;
  }

  public EventInsights2017 averageHighGoalsAuto(Float averageHighGoalsAuto) {
    this.averageHighGoalsAuto = averageHighGoalsAuto;
    return this;
  }

   /**
   * Average points scored in the high goal during auto.
   * @return averageHighGoalsAuto
  **/
  @Schema(required = true, description = "Average points scored in the high goal during auto.")
  public Float getAverageHighGoalsAuto() {
    return averageHighGoalsAuto;
  }

  public void setAverageHighGoalsAuto(Float averageHighGoalsAuto) {
    this.averageHighGoalsAuto = averageHighGoalsAuto;
  }

  public EventInsights2017 averageHighGoalsTeleop(Float averageHighGoalsTeleop) {
    this.averageHighGoalsTeleop = averageHighGoalsTeleop;
    return this;
  }

   /**
   * Average points scored in the high goal during teleop.
   * @return averageHighGoalsTeleop
  **/
  @Schema(required = true, description = "Average points scored in the high goal during teleop.")
  public Float getAverageHighGoalsTeleop() {
    return averageHighGoalsTeleop;
  }

  public void setAverageHighGoalsTeleop(Float averageHighGoalsTeleop) {
    this.averageHighGoalsTeleop = averageHighGoalsTeleop;
  }

  public EventInsights2017 averageLowGoals(Float averageLowGoals) {
    this.averageLowGoals = averageLowGoals;
    return this;
  }

   /**
   * Average points scored in the low goal.
   * @return averageLowGoals
  **/
  @Schema(required = true, description = "Average points scored in the low goal.")
  public Float getAverageLowGoals() {
    return averageLowGoals;
  }

  public void setAverageLowGoals(Float averageLowGoals) {
    this.averageLowGoals = averageLowGoals;
  }

  public EventInsights2017 averageLowGoalsAuto(Float averageLowGoalsAuto) {
    this.averageLowGoalsAuto = averageLowGoalsAuto;
    return this;
  }

   /**
   * Average points scored in the low goal during auto.
   * @return averageLowGoalsAuto
  **/
  @Schema(required = true, description = "Average points scored in the low goal during auto.")
  public Float getAverageLowGoalsAuto() {
    return averageLowGoalsAuto;
  }

  public void setAverageLowGoalsAuto(Float averageLowGoalsAuto) {
    this.averageLowGoalsAuto = averageLowGoalsAuto;
  }

  public EventInsights2017 averageLowGoalsTeleop(Float averageLowGoalsTeleop) {
    this.averageLowGoalsTeleop = averageLowGoalsTeleop;
    return this;
  }

   /**
   * Average points scored in the low goal during teleop.
   * @return averageLowGoalsTeleop
  **/
  @Schema(required = true, description = "Average points scored in the low goal during teleop.")
  public Float getAverageLowGoalsTeleop() {
    return averageLowGoalsTeleop;
  }

  public void setAverageLowGoalsTeleop(Float averageLowGoalsTeleop) {
    this.averageLowGoalsTeleop = averageLowGoalsTeleop;
  }

  public EventInsights2017 averageMobilityPointsAuto(Float averageMobilityPointsAuto) {
    this.averageMobilityPointsAuto = averageMobilityPointsAuto;
    return this;
  }

   /**
   * Average mobility points scored during auto.
   * @return averageMobilityPointsAuto
  **/
  @Schema(required = true, description = "Average mobility points scored during auto.")
  public Float getAverageMobilityPointsAuto() {
    return averageMobilityPointsAuto;
  }

  public void setAverageMobilityPointsAuto(Float averageMobilityPointsAuto) {
    this.averageMobilityPointsAuto = averageMobilityPointsAuto;
  }

  public EventInsights2017 averagePointsAuto(Float averagePointsAuto) {
    this.averagePointsAuto = averagePointsAuto;
    return this;
  }

   /**
   * Average points scored during auto.
   * @return averagePointsAuto
  **/
  @Schema(required = true, description = "Average points scored during auto.")
  public Float getAveragePointsAuto() {
    return averagePointsAuto;
  }

  public void setAveragePointsAuto(Float averagePointsAuto) {
    this.averagePointsAuto = averagePointsAuto;
  }

  public EventInsights2017 averagePointsTeleop(Float averagePointsTeleop) {
    this.averagePointsTeleop = averagePointsTeleop;
    return this;
  }

   /**
   * Average points scored during teleop.
   * @return averagePointsTeleop
  **/
  @Schema(required = true, description = "Average points scored during teleop.")
  public Float getAveragePointsTeleop() {
    return averagePointsTeleop;
  }

  public void setAveragePointsTeleop(Float averagePointsTeleop) {
    this.averagePointsTeleop = averagePointsTeleop;
  }

  public EventInsights2017 averageRotorPoints(Float averageRotorPoints) {
    this.averageRotorPoints = averageRotorPoints;
    return this;
  }

   /**
   * Average rotor points scored.
   * @return averageRotorPoints
  **/
  @Schema(required = true, description = "Average rotor points scored.")
  public Float getAverageRotorPoints() {
    return averageRotorPoints;
  }

  public void setAverageRotorPoints(Float averageRotorPoints) {
    this.averageRotorPoints = averageRotorPoints;
  }

  public EventInsights2017 averageRotorPointsAuto(Float averageRotorPointsAuto) {
    this.averageRotorPointsAuto = averageRotorPointsAuto;
    return this;
  }

   /**
   * Average rotor points scored during auto.
   * @return averageRotorPointsAuto
  **/
  @Schema(required = true, description = "Average rotor points scored during auto.")
  public Float getAverageRotorPointsAuto() {
    return averageRotorPointsAuto;
  }

  public void setAverageRotorPointsAuto(Float averageRotorPointsAuto) {
    this.averageRotorPointsAuto = averageRotorPointsAuto;
  }

  public EventInsights2017 averageRotorPointsTeleop(Float averageRotorPointsTeleop) {
    this.averageRotorPointsTeleop = averageRotorPointsTeleop;
    return this;
  }

   /**
   * Average rotor points scored during teleop.
   * @return averageRotorPointsTeleop
  **/
  @Schema(required = true, description = "Average rotor points scored during teleop.")
  public Float getAverageRotorPointsTeleop() {
    return averageRotorPointsTeleop;
  }

  public void setAverageRotorPointsTeleop(Float averageRotorPointsTeleop) {
    this.averageRotorPointsTeleop = averageRotorPointsTeleop;
  }

  public EventInsights2017 averageScore(Float averageScore) {
    this.averageScore = averageScore;
    return this;
  }

   /**
   * Average score.
   * @return averageScore
  **/
  @Schema(required = true, description = "Average score.")
  public Float getAverageScore() {
    return averageScore;
  }

  public void setAverageScore(Float averageScore) {
    this.averageScore = averageScore;
  }

  public EventInsights2017 averageTakeoffPointsTeleop(Float averageTakeoffPointsTeleop) {
    this.averageTakeoffPointsTeleop = averageTakeoffPointsTeleop;
    return this;
  }

   /**
   * Average takeoff points scored during teleop.
   * @return averageTakeoffPointsTeleop
  **/
  @Schema(required = true, description = "Average takeoff points scored during teleop.")
  public Float getAverageTakeoffPointsTeleop() {
    return averageTakeoffPointsTeleop;
  }

  public void setAverageTakeoffPointsTeleop(Float averageTakeoffPointsTeleop) {
    this.averageTakeoffPointsTeleop = averageTakeoffPointsTeleop;
  }

  public EventInsights2017 averageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
    return this;
  }

   /**
   * Average margin of victory.
   * @return averageWinMargin
  **/
  @Schema(required = true, description = "Average margin of victory.")
  public Float getAverageWinMargin() {
    return averageWinMargin;
  }

  public void setAverageWinMargin(Float averageWinMargin) {
    this.averageWinMargin = averageWinMargin;
  }

  public EventInsights2017 averageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
    return this;
  }

   /**
   * Average winning score.
   * @return averageWinScore
  **/
  @Schema(required = true, description = "Average winning score.")
  public Float getAverageWinScore() {
    return averageWinScore;
  }

  public void setAverageWinScore(Float averageWinScore) {
    this.averageWinScore = averageWinScore;
  }

  public EventInsights2017 highKpa(List<String> highKpa) {
    this.highKpa = highKpa;
    return this;
  }

  public EventInsights2017 addHighKpaItem(String highKpaItem) {
    this.highKpa.add(highKpaItem);
    return this;
  }

   /**
   * An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
   * @return highKpa
  **/
  @Schema(required = true, description = "An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match")
  public List<String> getHighKpa() {
    return highKpa;
  }

  public void setHighKpa(List<String> highKpa) {
    this.highKpa = highKpa;
  }

  public EventInsights2017 highScore(List<String> highScore) {
    this.highScore = highScore;
    return this;
  }

  public EventInsights2017 addHighScoreItem(String highScoreItem) {
    this.highScore.add(highScoreItem);
    return this;
  }

   /**
   * An array with three values, high score, match key from the match with the high score, and the name of the match
   * @return highScore
  **/
  @Schema(required = true, description = "An array with three values, high score, match key from the match with the high score, and the name of the match")
  public List<String> getHighScore() {
    return highScore;
  }

  public void setHighScore(List<String> highScore) {
    this.highScore = highScore;
  }

  public EventInsights2017 kpaAchieved(List<Float> kpaAchieved) {
    this.kpaAchieved = kpaAchieved;
    return this;
  }

  public EventInsights2017 addKpaAchievedItem(Float kpaAchievedItem) {
    this.kpaAchieved.add(kpaAchievedItem);
    return this;
  }

   /**
   * An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
   * @return kpaAchieved
  **/
  @Schema(required = true, description = "An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.")
  public List<Float> getKpaAchieved() {
    return kpaAchieved;
  }

  public void setKpaAchieved(List<Float> kpaAchieved) {
    this.kpaAchieved = kpaAchieved;
  }

  public EventInsights2017 mobilityCounts(List<Float> mobilityCounts) {
    this.mobilityCounts = mobilityCounts;
    return this;
  }

  public EventInsights2017 addMobilityCountsItem(Float mobilityCountsItem) {
    this.mobilityCounts.add(mobilityCountsItem);
    return this;
  }

   /**
   * An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
   * @return mobilityCounts
  **/
  @Schema(required = true, description = "An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.")
  public List<Float> getMobilityCounts() {
    return mobilityCounts;
  }

  public void setMobilityCounts(List<Float> mobilityCounts) {
    this.mobilityCounts = mobilityCounts;
  }

  public EventInsights2017 rotor1Engaged(List<Float> rotor1Engaged) {
    this.rotor1Engaged = rotor1Engaged;
    return this;
  }

  public EventInsights2017 addRotor1EngagedItem(Float rotor1EngagedItem) {
    this.rotor1Engaged.add(rotor1EngagedItem);
    return this;
  }

   /**
   * An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
   * @return rotor1Engaged
  **/
  @Schema(required = true, description = "An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.")
  public List<Float> getRotor1Engaged() {
    return rotor1Engaged;
  }

  public void setRotor1Engaged(List<Float> rotor1Engaged) {
    this.rotor1Engaged = rotor1Engaged;
  }

  public EventInsights2017 rotor1EngagedAuto(List<Float> rotor1EngagedAuto) {
    this.rotor1EngagedAuto = rotor1EngagedAuto;
    return this;
  }

  public EventInsights2017 addRotor1EngagedAutoItem(Float rotor1EngagedAutoItem) {
    this.rotor1EngagedAuto.add(rotor1EngagedAutoItem);
    return this;
  }

   /**
   * An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @return rotor1EngagedAuto
  **/
  @Schema(required = true, description = "An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.")
  public List<Float> getRotor1EngagedAuto() {
    return rotor1EngagedAuto;
  }

  public void setRotor1EngagedAuto(List<Float> rotor1EngagedAuto) {
    this.rotor1EngagedAuto = rotor1EngagedAuto;
  }

  public EventInsights2017 rotor2Engaged(List<Float> rotor2Engaged) {
    this.rotor2Engaged = rotor2Engaged;
    return this;
  }

  public EventInsights2017 addRotor2EngagedItem(Float rotor2EngagedItem) {
    this.rotor2Engaged.add(rotor2EngagedItem);
    return this;
  }

   /**
   * An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
   * @return rotor2Engaged
  **/
  @Schema(required = true, description = "An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.")
  public List<Float> getRotor2Engaged() {
    return rotor2Engaged;
  }

  public void setRotor2Engaged(List<Float> rotor2Engaged) {
    this.rotor2Engaged = rotor2Engaged;
  }

  public EventInsights2017 rotor2EngagedAuto(List<Float> rotor2EngagedAuto) {
    this.rotor2EngagedAuto = rotor2EngagedAuto;
    return this;
  }

  public EventInsights2017 addRotor2EngagedAutoItem(Float rotor2EngagedAutoItem) {
    this.rotor2EngagedAuto.add(rotor2EngagedAutoItem);
    return this;
  }

   /**
   * An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
   * @return rotor2EngagedAuto
  **/
  @Schema(required = true, description = "An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.")
  public List<Float> getRotor2EngagedAuto() {
    return rotor2EngagedAuto;
  }

  public void setRotor2EngagedAuto(List<Float> rotor2EngagedAuto) {
    this.rotor2EngagedAuto = rotor2EngagedAuto;
  }

  public EventInsights2017 rotor3Engaged(List<Float> rotor3Engaged) {
    this.rotor3Engaged = rotor3Engaged;
    return this;
  }

  public EventInsights2017 addRotor3EngagedItem(Float rotor3EngagedItem) {
    this.rotor3Engaged.add(rotor3EngagedItem);
    return this;
  }

   /**
   * An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
   * @return rotor3Engaged
  **/
  @Schema(required = true, description = "An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.")
  public List<Float> getRotor3Engaged() {
    return rotor3Engaged;
  }

  public void setRotor3Engaged(List<Float> rotor3Engaged) {
    this.rotor3Engaged = rotor3Engaged;
  }

  public EventInsights2017 rotor4Engaged(List<Float> rotor4Engaged) {
    this.rotor4Engaged = rotor4Engaged;
    return this;
  }

  public EventInsights2017 addRotor4EngagedItem(Float rotor4EngagedItem) {
    this.rotor4Engaged.add(rotor4EngagedItem);
    return this;
  }

   /**
   * An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
   * @return rotor4Engaged
  **/
  @Schema(required = true, description = "An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.")
  public List<Float> getRotor4Engaged() {
    return rotor4Engaged;
  }

  public void setRotor4Engaged(List<Float> rotor4Engaged) {
    this.rotor4Engaged = rotor4Engaged;
  }

  public EventInsights2017 takeoffCounts(List<Float> takeoffCounts) {
    this.takeoffCounts = takeoffCounts;
    return this;
  }

  public EventInsights2017 addTakeoffCountsItem(Float takeoffCountsItem) {
    this.takeoffCounts.add(takeoffCountsItem);
    return this;
  }

   /**
   * An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
   * @return takeoffCounts
  **/
  @Schema(required = true, description = "An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.")
  public List<Float> getTakeoffCounts() {
    return takeoffCounts;
  }

  public void setTakeoffCounts(List<Float> takeoffCounts) {
    this.takeoffCounts = takeoffCounts;
  }

  public EventInsights2017 unicornMatches(List<Float> unicornMatches) {
    this.unicornMatches = unicornMatches;
    return this;
  }

  public EventInsights2017 addUnicornMatchesItem(Float unicornMatchesItem) {
    this.unicornMatches.add(unicornMatchesItem);
    return this;
  }

   /**
   * An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
   * @return unicornMatches
  **/
  @Schema(required = true, description = "An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.")
  public List<Float> getUnicornMatches() {
    return unicornMatches;
  }

  public void setUnicornMatches(List<Float> unicornMatches) {
    this.unicornMatches = unicornMatches;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventInsights2017 eventInsights2017 = (EventInsights2017) o;
    return Objects.equals(this.averageFoulScore, eventInsights2017.averageFoulScore) &&
        Objects.equals(this.averageFuelPoints, eventInsights2017.averageFuelPoints) &&
        Objects.equals(this.averageFuelPointsAuto, eventInsights2017.averageFuelPointsAuto) &&
        Objects.equals(this.averageFuelPointsTeleop, eventInsights2017.averageFuelPointsTeleop) &&
        Objects.equals(this.averageHighGoals, eventInsights2017.averageHighGoals) &&
        Objects.equals(this.averageHighGoalsAuto, eventInsights2017.averageHighGoalsAuto) &&
        Objects.equals(this.averageHighGoalsTeleop, eventInsights2017.averageHighGoalsTeleop) &&
        Objects.equals(this.averageLowGoals, eventInsights2017.averageLowGoals) &&
        Objects.equals(this.averageLowGoalsAuto, eventInsights2017.averageLowGoalsAuto) &&
        Objects.equals(this.averageLowGoalsTeleop, eventInsights2017.averageLowGoalsTeleop) &&
        Objects.equals(this.averageMobilityPointsAuto, eventInsights2017.averageMobilityPointsAuto) &&
        Objects.equals(this.averagePointsAuto, eventInsights2017.averagePointsAuto) &&
        Objects.equals(this.averagePointsTeleop, eventInsights2017.averagePointsTeleop) &&
        Objects.equals(this.averageRotorPoints, eventInsights2017.averageRotorPoints) &&
        Objects.equals(this.averageRotorPointsAuto, eventInsights2017.averageRotorPointsAuto) &&
        Objects.equals(this.averageRotorPointsTeleop, eventInsights2017.averageRotorPointsTeleop) &&
        Objects.equals(this.averageScore, eventInsights2017.averageScore) &&
        Objects.equals(this.averageTakeoffPointsTeleop, eventInsights2017.averageTakeoffPointsTeleop) &&
        Objects.equals(this.averageWinMargin, eventInsights2017.averageWinMargin) &&
        Objects.equals(this.averageWinScore, eventInsights2017.averageWinScore) &&
        Objects.equals(this.highKpa, eventInsights2017.highKpa) &&
        Objects.equals(this.highScore, eventInsights2017.highScore) &&
        Objects.equals(this.kpaAchieved, eventInsights2017.kpaAchieved) &&
        Objects.equals(this.mobilityCounts, eventInsights2017.mobilityCounts) &&
        Objects.equals(this.rotor1Engaged, eventInsights2017.rotor1Engaged) &&
        Objects.equals(this.rotor1EngagedAuto, eventInsights2017.rotor1EngagedAuto) &&
        Objects.equals(this.rotor2Engaged, eventInsights2017.rotor2Engaged) &&
        Objects.equals(this.rotor2EngagedAuto, eventInsights2017.rotor2EngagedAuto) &&
        Objects.equals(this.rotor3Engaged, eventInsights2017.rotor3Engaged) &&
        Objects.equals(this.rotor4Engaged, eventInsights2017.rotor4Engaged) &&
        Objects.equals(this.takeoffCounts, eventInsights2017.takeoffCounts) &&
        Objects.equals(this.unicornMatches, eventInsights2017.unicornMatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageFoulScore, averageFuelPoints, averageFuelPointsAuto, averageFuelPointsTeleop, averageHighGoals, averageHighGoalsAuto, averageHighGoalsTeleop, averageLowGoals, averageLowGoalsAuto, averageLowGoalsTeleop, averageMobilityPointsAuto, averagePointsAuto, averagePointsTeleop, averageRotorPoints, averageRotorPointsAuto, averageRotorPointsTeleop, averageScore, averageTakeoffPointsTeleop, averageWinMargin, averageWinScore, highKpa, highScore, kpaAchieved, mobilityCounts, rotor1Engaged, rotor1EngagedAuto, rotor2Engaged, rotor2EngagedAuto, rotor3Engaged, rotor4Engaged, takeoffCounts, unicornMatches);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventInsights2017 {\n");
    
    sb.append("    averageFoulScore: ").append(toIndentedString(averageFoulScore)).append("\n");
    sb.append("    averageFuelPoints: ").append(toIndentedString(averageFuelPoints)).append("\n");
    sb.append("    averageFuelPointsAuto: ").append(toIndentedString(averageFuelPointsAuto)).append("\n");
    sb.append("    averageFuelPointsTeleop: ").append(toIndentedString(averageFuelPointsTeleop)).append("\n");
    sb.append("    averageHighGoals: ").append(toIndentedString(averageHighGoals)).append("\n");
    sb.append("    averageHighGoalsAuto: ").append(toIndentedString(averageHighGoalsAuto)).append("\n");
    sb.append("    averageHighGoalsTeleop: ").append(toIndentedString(averageHighGoalsTeleop)).append("\n");
    sb.append("    averageLowGoals: ").append(toIndentedString(averageLowGoals)).append("\n");
    sb.append("    averageLowGoalsAuto: ").append(toIndentedString(averageLowGoalsAuto)).append("\n");
    sb.append("    averageLowGoalsTeleop: ").append(toIndentedString(averageLowGoalsTeleop)).append("\n");
    sb.append("    averageMobilityPointsAuto: ").append(toIndentedString(averageMobilityPointsAuto)).append("\n");
    sb.append("    averagePointsAuto: ").append(toIndentedString(averagePointsAuto)).append("\n");
    sb.append("    averagePointsTeleop: ").append(toIndentedString(averagePointsTeleop)).append("\n");
    sb.append("    averageRotorPoints: ").append(toIndentedString(averageRotorPoints)).append("\n");
    sb.append("    averageRotorPointsAuto: ").append(toIndentedString(averageRotorPointsAuto)).append("\n");
    sb.append("    averageRotorPointsTeleop: ").append(toIndentedString(averageRotorPointsTeleop)).append("\n");
    sb.append("    averageScore: ").append(toIndentedString(averageScore)).append("\n");
    sb.append("    averageTakeoffPointsTeleop: ").append(toIndentedString(averageTakeoffPointsTeleop)).append("\n");
    sb.append("    averageWinMargin: ").append(toIndentedString(averageWinMargin)).append("\n");
    sb.append("    averageWinScore: ").append(toIndentedString(averageWinScore)).append("\n");
    sb.append("    highKpa: ").append(toIndentedString(highKpa)).append("\n");
    sb.append("    highScore: ").append(toIndentedString(highScore)).append("\n");
    sb.append("    kpaAchieved: ").append(toIndentedString(kpaAchieved)).append("\n");
    sb.append("    mobilityCounts: ").append(toIndentedString(mobilityCounts)).append("\n");
    sb.append("    rotor1Engaged: ").append(toIndentedString(rotor1Engaged)).append("\n");
    sb.append("    rotor1EngagedAuto: ").append(toIndentedString(rotor1EngagedAuto)).append("\n");
    sb.append("    rotor2Engaged: ").append(toIndentedString(rotor2Engaged)).append("\n");
    sb.append("    rotor2EngagedAuto: ").append(toIndentedString(rotor2EngagedAuto)).append("\n");
    sb.append("    rotor3Engaged: ").append(toIndentedString(rotor3Engaged)).append("\n");
    sb.append("    rotor4Engaged: ").append(toIndentedString(rotor4Engaged)).append("\n");
    sb.append("    takeoffCounts: ").append(toIndentedString(takeoffCounts)).append("\n");
    sb.append("    unicornMatches: ").append(toIndentedString(unicornMatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
